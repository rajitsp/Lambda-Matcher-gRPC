
// Generated by Akka gRPC. DO NOT EDIT.
package LogAnalyser

import akka.annotation.ApiMayChange


trait LogFinderService {
  
  
  def findLog(in: LogAnalyser.FindLogRequest): scala.concurrent.Future[LogAnalyser.FindLogReply]
  
}



object LogFinderService extends akka.grpc.ServiceDescription {
  val name = "LogFinderService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    LogAnalyser.HelloworldProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val FindLogRequestSerializer = new ScalapbProtobufSerializer(LogAnalyser.FindLogRequest.messageCompanion)
    
    val FindLogReplySerializer = new ScalapbProtobufSerializer(LogAnalyser.FindLogReply.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val findLogDescriptor: MethodDescriptor[LogAnalyser.FindLogRequest, LogAnalyser.FindLogReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("LogFinderService", "FindLog"))
        .setRequestMarshaller(new Marshaller(FindLogRequestSerializer))
        .setResponseMarshaller(new Marshaller(FindLogReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
