[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\conda_tmp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\conda_tmp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 16.0.2)
[debug]       Load.loadUnit: plugins took 120.7902ms
[debug]       Load.loadUnit: defsScala took 0.338ms
[debug] [Loading] Scanning directory C:\Users\Rajit Subin.DESKTOP-L7I1FKN\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Rajit Subin.DESKTOP-L7I1FKN\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.8608 ms
[debug]           Load.resolveProject(global-plugins) took 50.5941ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Rajit Subin.DESKTOP-L7I1FKN\.sbt\1.0\plugins, plugins: List(<none>))) took 97.7728ms
[debug] [Loading] Done in C:\Users\Rajit Subin.DESKTOP-L7I1FKN\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 126.5602ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.8691ms
[debug]     Load.loadUnit(file:/C:/Users/Rajit%20Subin.DESKTOP-L7I1FKN/.sbt/1.0/plugins/, ...) took 264.2505ms
[debug]   Load.apply: load took 493.9077ms
[debug]   Load.apply: resolveProjects took 6.4135ms
[debug]   Load.apply: finalTransforms took 104.0968ms
[debug]   Load.apply: config.delegates took 14.7994ms
[debug]   Load.apply: Def.make(settings)... took 537.4396ms
[debug]   Load.apply: structureIndex took 115.5042ms
[debug]   Load.apply: mkStreams took 2.0501ms
[info] loading global plugins from C:\Users\Rajit Subin.DESKTOP-L7I1FKN\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3302.1058ms
[debug]           Load.loadUnit: plugins took 37.0505ms
[debug]           Load.loadUnit: defsScala took 0.0109ms
[debug] [Loading] Scanning directory D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC\project
[debug]             Load.loadUnit: mkEval took 8.0533ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.277 ms
[info] loading settings for project lambda-matcher-grpc-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(lambda-matcher-grpc-build) took 11.4988ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lambda-matcher-grpc-build, base: D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC\project, plugins: List(<none>))) took 14.5566ms
[debug] [Loading] Done in D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC\project, returning: (lambda-matcher-grpc-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4586.8541ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.7222ms
[debug]         Load.loadUnit(file:/D:/0UIC%20Courses/CS%20441%20-%20Cloud%20computing/Lambda-Matcher-gRPC/project/, ...) took 4640.0914ms
[debug]       Load.apply: load took 4642.1406ms
[debug]       Load.apply: resolveProjects took 0.1943ms
[debug]       Load.apply: finalTransforms took 27.4657ms
[debug]       Load.apply: config.delegates took 0.6788ms
[debug]       Load.apply: Def.make(settings)... took 140.2474ms
[debug]       Load.apply: structureIndex took 40.7463ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7393.404ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC
[debug]       Load.loadUnit: mkEval took 0.5324ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(akka.grpc.sbt.AkkaGrpcPlugin), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging$NoPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(akka.grpc.sbt.AkkaGrpcPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgent),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging),Set(Atom(com.lightbend.sbt.javaagent.JavaAgent)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging),Set(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging$NoPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(And(Set(Atom(com.lightbend.sbt.javaagent.JavaAgent), Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging$NoPlugin))),Set(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,akka.grpc.sbt.AkkaGrpcPlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbtprotoc.ProtocPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 13.4083 ms
[info] loading settings for project lambda-matcher-grpc from build.sbt ...
[debug]         Load.resolveProject(lambda-matcher-grpc) took 180.5098ms
[debug]       Load.loadTransitive: finalizeProject(Project(id lambda-matcher-grpc, base: D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC, plugins: List(<none>))) took 202.6961ms
[debug] [Loading] Done in D:\0UIC Courses\CS 441 - Cloud computing\Lambda-Matcher-gRPC, returning: (lambda-matcher-grpc)
[debug]     Load.loadUnit: loadedProjectsRaw took 3087.8077ms
[debug]     Load.loadUnit: cleanEvalClasses took 67.6236ms
[debug]   Load.loadUnit(file:/D:/0UIC%20Courses/CS%20441%20-%20Cloud%20computing/Lambda-Matcher-gRPC/, ...) took 10549.9912ms
[debug] Load.apply: load took 10552.103ms
[debug] Load.apply: resolveProjects took 0.3781ms
[debug] Load.apply: finalTransforms took 145.0385ms
[debug] Load.apply: config.delegates took 0.5562ms
[debug] Load.apply: Def.make(settings)... took 177.2006ms
[debug] Load.apply: structureIndex took 40.8648ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to Lambda-Matcher-gRPC (in build file:/D:/0UIC%20Courses/CS%20441%20-%20Cloud%20computing/Lambda-Matcher-gRPC/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50570 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50570, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Lambda-Matcher-gRPC (in build file:/D:/0UIC%20Courses/CS%20441%20-%20Cloud%20computing/Lambda-Matcher-gRPC/)
[debug] > Exec(idea-shell, None, None)
